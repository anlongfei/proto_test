// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb1/pb1.proto

#ifndef PROTOBUF_pb1_2fpb1_2eproto__INCLUDED
#define PROTOBUF_pb1_2fpb1_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pb1_2fpb1_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsConditionImpl();
void InitDefaultsCondition();
inline void InitDefaults() {
  InitDefaultsCondition();
}
}  // namespace protobuf_pb1_2fpb1_2eproto
namespace pb1 {
class Condition;
class ConditionDefaultTypeInternal;
extern ConditionDefaultTypeInternal _Condition_default_instance_;
}  // namespace pb1
namespace pb1 {

// ===================================================================

class Condition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb1.Condition) */ {
 public:
  Condition();
  virtual ~Condition();

  Condition(const Condition& from);

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Condition(Condition&& from) noexcept
    : Condition() {
    *this = ::std::move(from);
  }

  inline Condition& operator=(Condition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Condition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Condition* internal_default_instance() {
    return reinterpret_cast<const Condition*>(
               &_Condition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Condition* other);
  friend void swap(Condition& a, Condition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Condition* New() const PROTOBUF_FINAL { return New(NULL); }

  Condition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Condition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string requires = 1;
  int requires_size() const;
  void clear_requires();
  static const int kRequiresFieldNumber = 1;
  const ::std::string& requires(int index) const;
  ::std::string* mutable_requires(int index);
  void set_requires(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_requires(int index, ::std::string&& value);
  #endif
  void set_requires(int index, const char* value);
  void set_requires(int index, const char* value, size_t size);
  ::std::string* add_requires();
  void add_requires(const ::std::string& value);
  #if LANG_CXX11
  void add_requires(::std::string&& value);
  #endif
  void add_requires(const char* value);
  void add_requires(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& requires() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_requires();

  // @@protoc_insertion_point(class_scope:pb1.Condition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> requires_;
  friend struct ::protobuf_pb1_2fpb1_2eproto::TableStruct;
  friend void ::protobuf_pb1_2fpb1_2eproto::InitDefaultsConditionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Condition

// repeated string requires = 1;
inline int Condition::requires_size() const {
  return requires_.size();
}
inline void Condition::clear_requires() {
  requires_.Clear();
}
inline const ::std::string& Condition::requires(int index) const {
  // @@protoc_insertion_point(field_get:pb1.Condition.requires)
  return requires_.Get(index);
}
inline ::std::string* Condition::mutable_requires(int index) {
  // @@protoc_insertion_point(field_mutable:pb1.Condition.requires)
  return requires_.Mutable(index);
}
inline void Condition::set_requires(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb1.Condition.requires)
  requires_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Condition::set_requires(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb1.Condition.requires)
  requires_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Condition::set_requires(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requires_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb1.Condition.requires)
}
inline void Condition::set_requires(int index, const char* value, size_t size) {
  requires_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb1.Condition.requires)
}
inline ::std::string* Condition::add_requires() {
  // @@protoc_insertion_point(field_add_mutable:pb1.Condition.requires)
  return requires_.Add();
}
inline void Condition::add_requires(const ::std::string& value) {
  requires_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb1.Condition.requires)
}
#if LANG_CXX11
inline void Condition::add_requires(::std::string&& value) {
  requires_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb1.Condition.requires)
}
#endif
inline void Condition::add_requires(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requires_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb1.Condition.requires)
}
inline void Condition::add_requires(const char* value, size_t size) {
  requires_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb1.Condition.requires)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Condition::requires() const {
  // @@protoc_insertion_point(field_list:pb1.Condition.requires)
  return requires_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Condition::mutable_requires() {
  // @@protoc_insertion_point(field_mutable_list:pb1.Condition.requires)
  return &requires_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pb1

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pb1_2fpb1_2eproto__INCLUDED
